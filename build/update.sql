--constant value table
		CREATE TABLE IF NOT EXISTS const_def_material_group
		(name text, descr text, val  UNSUPPORTED_DATA_TYPE());
		ALTER TABLE const_def_material_group OWNER TO bellagio;
		INSERT INTO const_def_material_group (name,descr,val) VALUES (
			'Группа материалов по умолчанию',
			'Группа материалов для открытия по умолчанию в журналах',
			null
		);
	
		--constant get value
		CREATE OR REPLACE FUNCTION const_def_material_group_val()
		RETURNS  UNSUPPORTED_DATA_TYPE() AS
		$BODY$
			SELECT val:: UNSUPPORTED_DATA_TYPE() AS val FROM const_def_material_group LIMIT 1;
		$BODY$
		LANGUAGE sql VOLATILE COST 100;
		ALTER FUNCTION const_def_material_group_val() OWNER TO bellagio;
		
		--constant set value
		CREATE OR REPLACE FUNCTION const_def_material_group_set_val(int)
		RETURNS void AS
		$BODY$
			UPDATE const_def_material_group SET val=$1;
		$BODY$
		LANGUAGE sql VOLATILE COST 100;
		ALTER FUNCTION const_def_material_group_set_val(int) OWNER TO bellagio;
		
		--edit view: all keys and descr
		CREATE OR REPLACE VIEW const_def_material_group_view AS
		SELECT t.name,t.descr
		,t.val::text AS val_descr
		FROM const_def_material_group AS t
		
		;
		ALTER VIEW const_def_material_group_view OWNER TO bellagio;
	



-- ******************* update 26/09/2016 16:38:51 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;

		--constant value table
		CREATE TABLE IF NOT EXISTS const_def_material_group
		(name text, descr text, val  UNSUPPORTED_DATA_TYPE());
		ALTER TABLE const_def_material_group OWNER TO bellagio;
		INSERT INTO const_def_material_group (name,descr,val) VALUES (
			'Группа материалов по умолчанию',
			'Группа материалов для открытия по умолчанию в журналах',
			null
		);
	
		--constant get value
		CREATE OR REPLACE FUNCTION const_def_material_group_val()
		RETURNS  UNSUPPORTED_DATA_TYPE() AS
		$BODY$
			SELECT val:: UNSUPPORTED_DATA_TYPE() AS val FROM const_def_material_group LIMIT 1;
		$BODY$
		LANGUAGE sql VOLATILE COST 100;
		ALTER FUNCTION const_def_material_group_val() OWNER TO bellagio;
		
		--constant set value
		CREATE OR REPLACE FUNCTION const_def_material_group_set_val(int)
		RETURNS void AS
		$BODY$
			UPDATE const_def_material_group SET val=$1;
		$BODY$
		LANGUAGE sql VOLATILE COST 100;
		ALTER FUNCTION const_def_material_group_set_val(int) OWNER TO bellagio;
		
		--edit view: all keys and descr
		CREATE OR REPLACE VIEW const_def_material_group_view AS
		SELECT t.name,t.descr
		,t.val::text AS val_descr
		FROM const_def_material_group AS t
		
		;
		ALTER VIEW const_def_material_group_view OWNER TO bellagio;
	


-- ******************* update 26/09/2016 16:44:26 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 26/09/2016 16:58:32 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 26/09/2016 17:01:02 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 26/09/2016 17:02:19 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 26/09/2016 17:08:12 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 26/09/2016 17:08:57 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 12:29:58 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:15:26 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:16:26 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:16:57 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:17:24 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:24:28 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:25:35 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 14:33:08 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:00:55 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:12:21 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:13:42 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:25:49 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:31:06 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:42:57 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 15:46:58 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:08:52 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:10:45 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:28:46 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:31:18 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:33:11 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:38:27 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 16:40:36 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:15:22 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:16:35 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:28:57 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:31:16 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:31:59 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:35:23 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:35:52 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 17:37:04 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 27/09/2016 23:18:11 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 28/09/2016 09:00:23 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 28/09/2016 09:49:28 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 28/09/2016 10:07:26 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 28/09/2016 10:08:56 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 28/09/2016 17:42:13 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 28/09/2016 23:18:32 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 14:22:28 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 14:23:12 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 17:49:26 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 18:17:13 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 22:52:24 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 22:54:31 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 23:16:45 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 23:27:27 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 29/09/2016 23:45:56 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 30/09/2016 10:58:06 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 30/09/2016 10:58:58 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 30/09/2016 11:01:53 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 30/09/2016 11:53:23 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 30/09/2016 16:09:29 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 12:49:56 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 14:13:03 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 14:16:25 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 14:19:09 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 14:20:56 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 14:43:45 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;



-- ******************* update 18/10/2016 15:21:17 ******************

			
			
		
			
				
			
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
						
		
			
			
			
			
		
			
			
			
		
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
			
			
			
		
			
						
			
			
			
		
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
						
			
			
		
			
			
			
						
			
			
			
			
			
			
						
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
						
			
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
						
			
			
			
			
						
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
			
			
			
						
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
						
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
						
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
									
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
		
			
			
			
						
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
		
			
			
			
						
			
			
			
			
		
			
			
			
			
			
						
			
						
			
			
			
			
			
						
						
						
						
			
			
		
			
			
			
			
			
			
						
			
						
			
			
			
			
			
			
			
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
						
			
			
			
			
			
									
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
		
			
			
		
			
			
			
						
			
			
			
			
			
			
			
			
			
		
			
			
			
			
						
			
			
			
			
			
		
			
			
			
			
			
						
			
			
			
						
			
		
			
			
			
			
			
			
		
			
			
			
					
		
			
			
			
						
			
			
			
			
			
			
		
			
			
			
			
		
			
			
			
			
			
			
			
			
		
CREATE OR REPLACE VIEW doc_productions_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_productions_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_productions_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='production'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_productions_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_product_disposals_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_product_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_product_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='product_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_product_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_procurements_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_procurements_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_procurements_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_procurement'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_procurements_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_to_wastes_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_to_wastes_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_to_waste'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_to_wastes_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_material_disposals_register_list AS 

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
;

ALTER VIEW doc_material_disposals_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_material_disposals_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='material_disposal'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_material_disposals_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_sales_register_list AS 

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name
;

ALTER VIEW doc_sales_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_sales_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY

SELECT
	'product'::text AS reg_id,
	get_reg_types_descr('product'::reg_types)::text AS reg_name,
	ra_products.deb,
	stores.name||chr(13)||chr(10)||products.name||chr(13)||chr(10)||
			doc_descr('production'::doc_types,doc_productions.number::text,doc_productions.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_products.quant,0)::text
	 AS facts
	FROM ra_products	
	LEFT JOIN stores ON stores.id=ra_products.store_id	
	LEFT JOIN products ON products.id=ra_products.product_id	
	LEFT JOIN doc_productions ON doc_productions.id=ra_products.doc_production_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_order'::text AS reg_id,
	get_reg_types_descr('product_order'::reg_types)::text AS reg_name,
	ra_product_orders.deb,
	stores.name||chr(13)||chr(10)||
			get_product_order_types_descr(product_order_type)
			||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_orders.quant,0)::text
	 AS facts
	FROM ra_product_orders	
	LEFT JOIN stores ON stores.id=ra_product_orders.store_id	
	LEFT JOIN products ON products.id=ra_product_orders.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material'::text AS reg_id,
	get_reg_types_descr('material'::reg_types)::text AS reg_name,
	ra_materials.deb,
	stores.name||chr(13)||chr(10)||
			get_stock_types_descr(stock_type)
			||chr(13)||chr(10)||materials.name||chr(13)||chr(10)||
			doc_descr('material_procurement'::doc_types,doc_material_procurements.number::text,doc_material_procurements.date_time)
			 AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_materials.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_materials.cost,0)::text
	 AS facts
	FROM ra_materials	
	LEFT JOIN stores ON stores.id=ra_materials.store_id	
	LEFT JOIN materials ON materials.id=ra_materials.material_id	
	LEFT JOIN doc_material_procurements ON doc_material_procurements.id=ra_materials.doc_procurement_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'material_sale'::text AS reg_id,
	get_reg_types_descr('material_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||materials.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_material_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_material_sales.cost,0)::text
	 AS facts
	FROM ra_material_sales	
	LEFT JOIN stores ON stores.id=ra_material_sales.store_id	
	LEFT JOIN materials ON materials.id=ra_material_sales.material_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
UNION ALL
SELECT
	'product_sale'::text AS reg_id,
	get_reg_types_descr('product_sale'::reg_types)::text AS reg_name,
	
	TRUE AS deb,
	stores.name||chr(13)||chr(10)||products.name AS dimensions,
	'' AS attributes,
	
		COALESCE(ra_product_sales.quant,0)::text
	||chr(13)||chr(10)||
		COALESCE(ra_product_sales.cost,0)::text
	 AS facts
	FROM ra_product_sales	
	LEFT JOIN stores ON stores.id=ra_product_sales.store_id	
	LEFT JOIN products ON products.id=ra_product_sales.product_id
	WHERE doc_type='sale'::doc_types AND doc_id=in_doc_id	
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_sales_get_actions(IN in_doc_id int) OWNER TO bellagio;;

CREATE OR REPLACE VIEW doc_expences_register_list AS 
;

ALTER VIEW doc_expences_register_list OWNER TO bellagio;


--doc actions

CREATE OR REPLACE FUNCTION doc_expences_get_actions(IN in_doc_id int)
  RETURNS TABLE(reg_id text, reg_name text, deb boolean, dimensions text, attributes text, facts text) AS
$BODY$
BEGIN
RETURN QUERY
;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE COST 100;
  
ALTER FUNCTION doc_expences_get_actions(IN in_doc_id int) OWNER TO bellagio;;
